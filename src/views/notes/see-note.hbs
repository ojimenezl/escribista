{{#each errors}}
  <div class="alert alert-danger alert-dismissible fade show" role="alert">
    {{text}}
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
{{/each}}
<style>
  .bold {
    font-weight: bold;
  }
  .italic {
    font-style: italic;
  }
  .underline {
    text-decoration: underline;
  }
  
  .justify-left {
    text-align: left;
  }
  
  .justify-center {
    text-align: center;
  }
  
  .justify-right {
    text-align: right;
  }
</style>
<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-12 my-8">
      <div class="notebook">
          <div class="notebook-header text-center">
            <h3 class="notebook-title" style="color: white;">{{note.title}}</h3>
          </div>
          <div class="notebook-content">
            <div class="form-group">
              <div class="d-flex">
                <div class="flex-grow-1 mr-2">
                  {{!-- <label for="title" class="form-label" style="color: white;">Titulo:</label> --}}
                  {{!-- <input type="text" name="idHistoria" value="{{idHistoria}}" hidden> --}}
                  {{!-- <input type="text" name="title" id="title-input" value={{note.title}} class="form-control" style="width: 35%; height: 40px;" placeholder="Title" autofocus oninput="updateLabel(this.value)"> --}}
                </div>
              </div>
            </div>


          <div class="form-group">
            <label for="description-div" class="form-label" style="color: white;">Descripción:</label>
            <div id="description-div" class="textarea-console" style="border: 1px solid white; resize: none; height: 360px; color: white;">
              {{{note.description}}}
            </div>



          </div>

      

          </div>
      </div>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>
<script>

  function updateLabel(value) {
    const label = document.querySelector('.notebook-title');
    label.textContent = value ? value : 'Nuevo Capitulo';
  }
   document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('myForm');
    form.addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        e.preventDefault();
      }
    });
  });

const descriptionDiv = document.getElementById('description-div');

descriptionDiv.addEventListener('keyup', (event) => {
  if (event.key === 'Enter') {
    event.preventDefault(); // Evita que se inserte una nueva línea por defecto
    const selection = window.getSelection();
    const range = selection.getRangeAt(0);
    const br = document.createElement('br');
    range.insertNode(br);
    range.setStartAfter(br);
    range.setEndAfter(br);
    selection.removeAllRanges();
    selection.addRange(range);
    descriptionDiv.focus(); // Vuelve a enfocar el elemento <div>
  }
});

  function toggleFormat(style) {
    const textarea = document.getElementById('description-div');
    const selection = window.getSelection();

    textarea.focus();
    document.execCommand(style, false, null);

    const state = document.queryCommandState(style);
    const button = document.querySelector(`[onclick="toggleFormat('${style}')"]`);

    if (state) {
      button.classList.add('active');
    } else {
      button.classList.remove('active');
    }
  }

   function toggleBold() {
    const textarea = document.getElementById('description-div');
    const selection = window.getSelection();

    textarea.focus();
    document.execCommand('bold', false, null);

    const state = document.queryCommandState('bold');
    const button = document.querySelector('[onclick="toggleBold()"]');

    if (!state) {
      textarea.classList.add('bold');
      button.classList.add('active');
    } else {
      textarea.classList.remove('bold');
      button.classList.remove('active');
    }
  }

   function toggleAlignment(alignment) {
    const textarea = document.getElementById('description-div');
    const selection = window.getSelection();

    textarea.focus();
    document.execCommand(alignment, false, null);

    const style = window.getComputedStyle(textarea);
    const textAlign = style.getPropertyValue('text-align');
    const button = document.querySelector(`[onclick="toggleAlignment('${alignment}')"]`);
    console.log(textAlign,alignment)
    if ("justify-"+textAlign !== alignment) {
      textarea.classList.add(alignment);
      button.classList.add('active');
    } else {
      textarea.classList.remove(alignment);
      button.classList.remove('active');
    }
  }

    // Obtener el elemento del div con contenido editable
  const descriptionDiv2 = document.getElementById('description-div');
  // Obtener el textarea oculto
  const descriptionInput2 = document.getElementById('description');

  // Manejar el evento 'input' para detectar cambios en el div con contenido editable
  descriptionDiv2.addEventListener('input', () => {
    const text = descriptionDiv2.innerHTML;
    descriptionInput2.value = text; // Asignar el contenido del div al textarea oculto
  });

 
</script>


